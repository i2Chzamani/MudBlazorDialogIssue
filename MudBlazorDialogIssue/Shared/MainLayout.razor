@inherits LayoutComponentBase


<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.ExtraSmall" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
        <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_currentTheme" />
        <MudTooltip Text="@themeTooltip">
            <MudIconButton @onclick="ToggleTheme" Icon="@modeIcon" Size="@Size.Large" Color="@darkModeIconColor" Class="m0 p0" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MudBlazorDialogIssue</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    protected override void OnInitialized()
    {
        _currentTheme = _defaultTheme;

    }

    #region Theme

    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    private string modeIcon => _isDarkMode ? Icons.Filled.LightMode : Icons.Outlined.DarkMode;
    private Color darkModeIconColor => _isDarkMode ? Color.Secondary : Color.Dark;
    private string themeTooltip => _isDarkMode ? "Switch to light mode" : "Switch to dark mode";

    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
    }

    private MudTheme _currentTheme = new MudTheme();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    private readonly MudTheme _defaultTheme =
        new MudTheme()
            {
                Palette = new Palette()
                {
                    Black = "#272c34"
                },
                Typography = new Typography()
                {
                    Default = new Default()
                    {
                        FontFamily = new[] { "DINPro-Bold", "Verdana" }
                    }
                }
            };
    private readonly MudTheme _darkTheme =
        new MudTheme()
            {
                Palette = new Palette()
                {
                    Black = "#27272f",
                    Background = "#32333d",
                    BackgroundGrey = "#27272f",
                    Surface = "#373740",
                    DrawerBackground = "#27272f",
                    DrawerText = "rgba(255,255,255, 0.50)",
                    AppbarBackground = "#27272f",
                    AppbarText = "rgba(255,255,255, 0.70)",
                    TextPrimary = "rgba(255,255,255, 0.70)",
                    TextSecondary = "rgba(255,255,255, 0.50)",
                    ActionDefault = "#adadb1",
                    ActionDisabled = "rgba(255,255,255, 0.26)",
                    ActionDisabledBackground = "rgba(255,255,255, 0.12)",
                    DrawerIcon = "rgba(255,255,255, 0.50)"
                }
            };

    #endregion
}